volcano
image(volcano)
persp(volcano)
scores <- c(81, 91, 78.5, 73.5, 66, 83.5, 76, 81, 68.5, 83.5)
scales(scores)
scale(scores)
url <- "https://raw.githubusercontent.com/NicoleRadziwill"
url <- paste(url, "/Data/master/compare-scores.csv", sep="")
data <- getURL(url, ssl.verifypeer=FALSE)
library(RCurl)
data <- getURL(url, ssl.verifypeer=FALSE)
all.scores <- read.csv(textConnection(data))
head(all.scores)
par(mfrow=c(1,2))
hist(all.scores$score)
qqline(all.scores$score)
qqline(all.scores$score)
qqline(all.scores$score)
hist(all.scores$score)
qqline(all.scores$score)
mean(all.scores)
mean(all.scores$score)
sd(all.scores$score)
N(47.3, 9.3)
library(descstat)
library(pastecs)
N(47.3,9.30)
rnorm(500,47.3,9.3)
a <- rnorm(500, 47.3, 9.3)
plot(rnorm)
pnorm(50, mean=47.3, sd=9.3)
shiny::runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp("UVA Grades App")
runApp('UVA Grades App/app-files')
runApp("UVA Grades App/app-files")
install.packages("shiny")
shiny::runApp('UVA Grades App/app-files')
args(checkboxGroupInput)
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
help("mutate")
help(filter)
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
library(shiny)
library(plyr)
library(dplyr)
library(ggplot2)
library(readxl)
library(stringr)
library(reshape2)
#Add the back end functions to the namespace
source("back_end_functions.R")
setwd( "C:/Users/Student/Documents/UVA Grades App")
# Read in the data
data = read_excel("Grades.xlsx")
use = tbl_df(data)
# Turn the period into a factor so it can later be sorted temporally
use$Period <- factor(use$Period, levels = c("2011.F", "2012.S", "2012.F",
"2013.S", "2013.F", "2014.S",
"2014.F", "2015.S", "2015.F"), labels =
c("Fall 2011", "Spring 2012", "Fall 2012", "Spring 2013",
"Fall 2013", "Spring 2014", "Fall 2014", "Spring 2015",
"Fall 2015"),
ordered = T)
# Common names for the merge
common_names <- .(Instructor.Last.Name, Instructor.First.Name, Instructor.Middle.Name,
Instructor.Email, Course.Number, Title, Period)
# Merge common sections
row_merge <- function(in_data_frame){
return(ddply(.data = in_data_frame, .variables = common_names, summarize, A_plus = sum(A_plus),
A = sum(A), A_minus = sum(A_minus), B_plus = sum(B_plus), B = sum(B), B_minus = sum(B_minus),
C_plus = sum(C_plus), C = sum(C), C_minus = sum(C_minus), D_plus = sum(D_plus), D = sum(D),
D_minus = sum(D_minus), fail = sum(fail), Tot = sum(Tot), DR = sum(DR), W = sum(W)))
}
#Split the input string
course <- unlist(str_split(str_trim(input$course_input), " "))
dept_label <- course[1]
course_number <- course[2]
plot_rows <- filter(use, Course.Number == course_number,
Instructor.Last.Name == input$instructor)
plot_rows <- row_merge(plot_rows)
use
use <- filter(use, Instructor.Last.Name == "Abdesselam")
use
# Read in the data
data = read_excel("Grades.xlsx")
use = tbl_df(data)
# Turn the period into a factor so it can later be sorted temporally
use$Period <- factor(use$Period, levels = c("2011.F", "2012.S", "2012.F",
"2013.S", "2013.F", "2014.S",
"2014.F", "2015.S", "2015.F"), labels =
c("Fall 2011", "Spring 2012", "Fall 2012", "Spring 2013",
"Fall 2013", "Spring 2014", "Fall 2014", "Spring 2015",
"Fall 2015"),
ordered = T)
bloom <- filter(use, Instructor.Last.Name == "Bloomfield")
bloom
bloom <- filter(use, Instructor.Last.Name == "Bloomfield", Course.Number == 2150)
bloom
# Common names for the merge
common_names <- .(Instructor.Last.Name, Instructor.First.Name, Instructor.Middle.Name,
Instructor.Email, Course.Number, Title, Period)
# Merge common sections
row_merge <- function(in_data_frame){
return(ddply(.data = in_data_frame, .variables = common_names, summarize, A_plus = sum(A_plus),
A = sum(A), A_minus = sum(A_minus), B_plus = sum(B_plus), B = sum(B), B_minus = sum(B_minus),
C_plus = sum(C_plus), C = sum(C), C_minus = sum(C_minus), D_plus = sum(D_plus), D = sum(D),
D_minus = sum(D_minus), fail = sum(fail), Tot = sum(Tot), DR = sum(DR), W = sum(W)))
}
bloom
plot_rows <- mutate(bloom, A_tot = sum(A_plus, A))
plot_rows <- mutate(plot_rows, Not_Passing = sum(D_plus, D, D_minus, fail))
plot_rows <- select(plot_rows, A_tot, A_minus, B_plus, B, B_minus,
C_plus, C, C_minus, Not_Passing, Period)
plot_rows
bloom
bloom$A_plus
plot_rows <- mutate(bloom, A_tot = sum(A_plus, A))
plot_rows
bloom$A_tot
plot_rows$A_tot
plot_rows <- mutate(bloom, A_tot = A_plus + A)
plot_rows$A_tot
l <- c("All Grades", "A", "B")
"All Grades" %in% l
"All Grade" %in% l
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
install.packages("foreach")
lis <- c("Hello", "Goodbye")
foreach(a = lis) %do% paste(a)
foreach(a = lis)
library(foreach)
foreach(a = lis) %do% paste(a)
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
