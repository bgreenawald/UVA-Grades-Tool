volcano
image(volcano)
persp(volcano)
scores <- c(81, 91, 78.5, 73.5, 66, 83.5, 76, 81, 68.5, 83.5)
scales(scores)
scale(scores)
url <- "https://raw.githubusercontent.com/NicoleRadziwill"
url <- paste(url, "/Data/master/compare-scores.csv", sep="")
data <- getURL(url, ssl.verifypeer=FALSE)
library(RCurl)
data <- getURL(url, ssl.verifypeer=FALSE)
all.scores <- read.csv(textConnection(data))
head(all.scores)
par(mfrow=c(1,2))
hist(all.scores$score)
qqline(all.scores$score)
qqline(all.scores$score)
qqline(all.scores$score)
hist(all.scores$score)
qqline(all.scores$score)
mean(all.scores)
mean(all.scores$score)
sd(all.scores$score)
N(47.3, 9.3)
library(descstat)
library(pastecs)
N(47.3,9.30)
rnorm(500,47.3,9.3)
a <- rnorm(500, 47.3, 9.3)
plot(rnorm)
pnorm(50, mean=47.3, sd=9.3)
install.packages("shiny")
install.packages("ggplot2")
install.packages("plyr")
install.packages("dplyr")
install.packages("readxl")
install.packages("stringr")
shiny::runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
install.packages("reshape")
install.packages("reshape2")
# Script to play around with various ideas for the grades app
library(plyr)
library(dplyr)
library(ggplot2)
library(readxl)
# Common names for the merge
common_names <- .(Instructor.Last.Name, Instructor.First.Name, Instructor.Middle.Name,
Instructor.Email, Course.Number, Title, Period)
# Given some data frame within our grades data set,
# merge sections within a given period and return the result.
# NOTE: GPA will now need to be recalculated so you must call
# calc_GPA right afterwards
row_merge <- function(in_data_frame){
return(ddply(.data = in_data_frame, .variables = common_names, summarize, A_plus = sum(A_plus),
A = sum(A), A_minus = sum(A_minus), B_plus = sum(B_plus), B = sum(B), B_minus = sum(B_minus),
C_plus = sum(C_plus), C = sum(C), C_minus = sum(C_minus), D_plus = sum(D_plus), D = sum(D),
D_minus = sum(D_minus), fail = sum(fail)))
}
# Given a row within the grades data set, calculate the GPA
calc_GPA <- function(in_data_row){
# Calucate the total grade points earned in this row
earned <- 4*in_data_row$A_plus + 4*in_data_row$A + 3.7*in_data_row$A_minus +
3.3*in_data_row$B_plus + 3*in_data_row$B + 2.7*in_data_row$B_minus +
2.3*in_data_row$C_plus + 2*in_data_row$C + 1.7*in_data_row$C_minus +
1.3*in_data_row$D_plus + 1*in_data_row$D + .7*in_data_row$D_minus
# Calculate the maximum possible points that could be earned
total <- in_data_row$Tot - in_data_row$DR - in_data_row$W
# Return GPA (the ratio of these two). Note that number of credits will cancel
# out so it is not included in this computation
return(round(earned/total,2))
}
calc_GPA_2 <- function(A_plus, A, A_minus, B_plus, B, B_minus, C_plus
, C, C_minus, D_plus, D, D_minus, Tot, DR, W){
# Calucate the total grade points earned in this row
earned <- 4*A_plus + 4*A + 3.7*A_minus +
3.3*B_plus + 3*B + 2.7*B_minus +
2.3*C_plus + 2*C + 1.7*C_minus +
1.3*D_plus + 1*D + .7*D_minus
# Calculate the maximum possible points that could be earned
total <- Tot - DR - W
# Return GPA (the ratio of these two). Note that number of credits will cancel
# out so it is not included in this computation
return(round(earned/total,2))
}
runApp('UVA Grades App/app-files')
#Add the back end functions to the namespace
source("back_end_functions.R")
setwd("C:/Users/Student/Documents/UVA Grades App")
# Read in the data
data = read_excel("Grades.xlsx")
use = tbl_df(data)
# Turn the period into a factor so it can later be sorted temporally
use$Period <- factor(use$Period, levels = c("2011.F", "2012.S", "2012.F",
"2013.S", "2013.F", "2014.S",
"2014.F", "2015.S", "2015.F"), labels =
c("Fall 2011", "Spring 2012", "Fall 2012", "Spring 2013",
"Fall 2013", "Spring 2014", "Fall 2014", "Spring 2015",
"Fall 2015"),
ordered = T)
colnames(use)
bloom <- filter(use, Instructor.Lase.Name == "Bloomfield", Course.Number == 2150)\
bloom <- filter(use, Instructor.Lase.Name == "Bloomfield", Course.Number == 2150)
bloom <- filter(use, Instructor.Last.Name == "Bloomfield", Course.Number == 2150)
bloom
# Common names for the merge
common_names <- .(Instructor.Last.Name, Instructor.First.Name, Instructor.Middle.Name,
Instructor.Email, Course.Number, Title, Period)
bloom <- row_merge(bloom)\
bloom <- row_merge(bloom)
bloom
melt_bloom <- melt(bloom)
melt_bloom
melt_bloom <- melt(bloom, id.vars = "Period")
melt_bloom
bloom <- select(bloom, A_plus, A, A_minus, B_plus, B, B_minus, C_plus, C, C_minus, D_plus, D, D_minus, fail)
bloom
bloom <- filter(use, Instructor.Lase.Name == "Bloomfield", Course.Number == 2150)
bloom <- filter(use, Instructor.Last.Name == "Bloomfield", Course.Number == 2150)
bloom <- select(bloom, A_plus, A, A_minus, B_plus, B, B_minus, C_plus, C, C_minus, D_plus, D, D_minus, fail, Period)
bloom
bloom <- row_merge(bloom)
bloom <- filter(use, Instructor.Last.Name == "Bloomfield", Course.Number == 2150)
bloom
bloom <- row_merge(bloom)
bloom <- select(bloom, A_plus, A, A_minus, B_plus, B, B_minus, C_plus, C, C_minus, D_plus, D, D_minus, fail, Period)
bloom
melt_bloom <- melt(bloom, id.vars = "Period")
melt_bloom
ggplot(melt_bloom, aes(x = Period, y = value, colour = variable))
ggplot(melt_bloom, aes(x = Period, y = value, colour = variable)) + geom_line()
ggplot(melt_bloom, aes(x = Period, y = value, colour = variable, group = value)) + geom_line()
ggplot(melt_bloom, aes(x = Period, y = value, colour = variable, group = variable)) + geom_line()
runApp('app-files')
runApp('app-files')
runApp('app-files')
1 == 1
1 == 1 && 1 == 2
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
runApp('app-files')
